/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${meta.id}/${task.process.tokenize(":")[-1]}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
    ]

    /* SUBWORKFLOWS CONFIGURATION */

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:DENOISE_DWI" {
        ext.extent = params.dwi_noise_filter_patch_size
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:DENOISE_REVDWI" {
        ext.extent = params.dwi_noise_filter_patch_size
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:UTILS_EXTRACTB0" {
        ext.b0_extraction_strategy = "mean"
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:TOPUP_EDDY:PREPROC_TOPUP" {
        ext.prefix_topup            = params.dwi_susceptibility_filter_output_prefix
        ext.default_config_topup    = params.dwi_susceptibility_filter_config_file
        ext.encoding                = "y"  //FIXME
        ext.readout                 = 0.062 //FIXME
        ext.b0_thr_extract_b0       = params.dwi_b0_extract_threshold
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:TOPUP_EDDY:PREPROC_EDDY" {
        ext.prefix_topup                            = params.dwi_susceptibility_filter_output_prefix
        ext.slice_drop_flag                         = params.dwi_motion_and_eddy_filter_restore_slices
        ext.bet_topup_before_eddy_f                 = params.dwi_motion_and_eddy_filter_bet_f_threshold
        ext.eddy_cmd                                = params.dwi_motion_and_eddy_filter_command
        ext.dilate_b0_mask_prelim_brain_extraction  = params.dwi_mask_prelim_bet_dilation_radius
        ext.bet_prelim_f                            = params.dwi_mask_prelim_bet_f_threshold
        ext.b0_thr_extract_b0                       = params.dwi_b0_extract_threshold
        ext.encoding                                = "y"  //FIXME
        ext.readout                                 = 0.062 //FIXME
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:TOPUP_EDDY:UTILS_EXTRACTB0" {
        ext.b0_extraction_strategy = "mean"
    }


    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:BETCROP_FSLBETCROP" {
        ext.bet_f   = params.dwi_mask_final_bet_f_threshold
        ext.b0_thr  = params.dwi_b0_extract_threshold
        ext.crop    = true
        ext.dilate  = false
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:N4_DWI" {
        ext.bspline_knot_per_voxel = params.dwi_bias_correction_bspline_knots_per_voxel
        ext.shrink_factor          = params.dwi_bias_correction_shrink_factor
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:RESAMPLE_DWI" {
        ext.voxel_size      = params.dwi_spatial_resample_resolution
        ext.interp          = params.dwi_spatial_resample_interpolation
        ext.first_suffix    = "dwi"
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:BETCROP_CROPVOLUME" {
        ext.output_bbox     = false
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_DWI:RESAMPLE_MASK" {
        ext.voxel_size      = params.dwi_spatial_resample_resolution
        ext.interp          = "nn"
        ext.first_suffix    = "mask"
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_T1:BETCROP_CROPVOLUME_T1" {
        ext.output_bbox     = true
        ext.first_suffix    = "t1"
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_T1:DENOISING_NLMEANS" {
        ext.when     = params.run_t1_denoising
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_T1:BETCROP_CROPVOLUME_MASK" {
        ext.output_bbox     = false
        ext.first_suffix    = "t1_mask"
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_T1:BETCROP_SYNTHBET_T1" {
        ext.nocsf = params.t1_bet_no_csf
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:PREPROC_T1:IMAGE_RESAMPLE" {
        ext.voxel_size      = params.t1_spatial_resample_resolution
        ext.interp          = params.t1_spatial_resample_interpolation
        ext.first_suffix    = "t1"
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:T1_REGISTRATION:REGISTRATION_SYNTHREGISTRATION" {
        ext.lambda           = params.t1_register_synthmorph_regularization
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:REGISTRATION_CONVERT" {
        ext.out_format_affine = "fsl"
    }

    //withName: "NF_SURGERYFLOW:SURGERYFLOW:T1_REGISTRATION:REGISTER_ANATTODWI" {
        // Nothing to do !
    //}

    //withName: "NF_SURGERYFLOW:SURGERYFLOW:ANATOMICAL_SEGMENTATION:SEGMENTATION_FASTSEG" {
        // Nothing to do !
    //}

    //withName: "NF_SURGERYFLOW:SURGERYFLOW:ANATOMICAL_SEGMENTATION:SEGMENTATION_FREESURFERSEG" {
        // Nothing to do !
    //}

    withName: "NF_SURGERYFLOW:SURGERYFLOW:ANATOMICAL_SEGMENTATION:SEGMENTATION_SYNTHSEG" {
        ext.fast = params.t1_tissue_segment_synth_fast
    }

    /* MODULES CONFIGURATION */

    //TODO: Probably to delete. Feed fa from DTIMETRICS instead

    // withName: "NF_SURGERYFLOW:SURGERYFLOW:REGISTRATION_FA" {
    //     ext.fa          = true
    //     ext.ad          = false
    //     ext.evecs       = false
    //     ext.evals       = false
    //     ext.ga          = false
    //     ext.rgb         = false
    //     ext.md          = false
    //     ext.mode        = false
    //     ext.norm        = false
    //     ext.rd          = false
    //     ext.tensor      = false
    //     ext.nonphysical = false
    //     ext.pulsation   = false
    //     ext.residual    = false
    // }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:TRANSFORM_WMPARC" {
        ext.dimensionality  = 3
        ext.image_type      = 0
        ext.interpolation   = "NearestNeighbor"
        ext.output_dtype    = "uchar"
        ext.default_val     = 0
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:TRANSFORM_APARC_ASEG" {
        ext.dimensionality  = 3
        ext.image_type      = 0
        ext.interpolation   = "MultiLabel"
        ext.output_dtype    = "short"
        ext.default_val     = 0
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:RECONST_FRF" {
        ext.fa          = params.dwi_fodf_fit_frf_max_fa_threshold
        ext.fa_min      = params.dwi_fodf_fit_frf_min_fa_threshold
        ext.nvox_min    = params.dwi_fodf_fit_frf_min_n_voxels
        ext.roi_radius  = params.dwi_fodf_fit_frf_roi_radius
        ext.set_frf     = params.dwi_fodf_fit_force_frf ? true : false
        ext.manual_frf  = params.dwi_fodf_fit_force_frf
    }

    //withName: "RECONST_MEANFRF" {
        // Nothing to do !
    //}

    withName: "NF_SURGERYFLOW:SURGERYFLOW:RECONST_DTIMETRICS" {
        ext.ad          = true
        ext.evecs       = true
        ext.evals       = true
        ext.fa          = true
        ext.ga          = true
        ext.rgb         = true
        ext.md          = true
        ext.mode        = true
        ext.norm        = true
        ext.rd          = true
        ext.tensor      = true
        ext.nonphysical = true
        ext.pulsation   = true
        ext.residual    = true
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:RECONST_FODF" {
        ext.b0_thr_extract_b0       = params.dwi_b0_extract_threshold
        ext.dwi_shell_tolerance     = params.dwi_shell_extract_tolerance
        ext.min_fodf_shell_value    = params.dwi_fodf_fit_shell_min_bvalue
        ext.fodf_shells             = params.dwi_fodf_fit_shells
        ext.sh_order                = params.dwi_fodf_fit_order
        ext.sh_basis                = params.dwi_fodf_fit_basis
        ext.fa_threshold            = params.dwi_fodf_fit_peaks_ventricle_max_fa
        ext.md_threshold            = params.dwi_fodf_fit_peaks_ventricle_min_md
        ext.relative_threshold      = params.dwi_fodf_fit_peaks_relative_threshold
        ext.fodf_metrics_a_factor   = params.dwi_fodf_fit_peaks_absolute_factor
        ext.absolute_peaks          = true  //FIXME
        ext.processes               = 4     //FIXME
        ext.peaks                   = true
        ext.peak_indices            = true
        ext.afd_max                 = true
        ext.afd_total               = true
        ext.afd_sum                 = true
        ext.nufo                    = true
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:TRACKING_PFTTRACKING" {
        ext.when                            = params.run_pft_tracking
        ext.pft_seeding_mask_type           = params.fodf_pft_fit_seeding_type
        ext.pft_fa_seeding_mask_threshold   = params.fodf_pft_fit_seeding_fa_mask_threshold
        ext.pft_seeding                     = params.fodf_pft_fit_seeding_strategy
        ext.pft_nbr_seeds                   = params.fodf_pft_fit_seeding_n_seeds
        ext.pft_algo                        = params.fodf_pft_fit_algorithm
        ext.pft_step                        = params.fodf_pft_fit_step_size
        ext.pft_theta                       = params.fodf_pft_fit_theta_max_deviation
        ext.pft_sfthres                     = params.fodf_pft_fit_sf_threshold
        ext.pft_sfthres_init                = params.fodf_pft_fit_sf_initial_threshold
        ext.pft_min_len                     = params.fodf_pft_fit_streamline_min_length
        ext.pft_max_len                     = params.fodf_pft_fit_streamline_max_length
        ext.pft_particles                   = params.fodf_pft_fit_filter_n_particles
        ext.pft_back                        = params.fodf_pft_fit_filter_backward_step_size
        ext.pft_front                       = params.fodf_pft_fit_filter_forward_step_size
        ext.pft_random_seed                 = params.fodf_pft_fit_random_seed
        ext.pft_compress_streamlines        = params.fodf_pft_fit_compress_tractogram
        ext.pft_compress_value              = params.fodf_pft_fit_compress_max_displacement
        ext.basis                           = params.dwi_fodf_fit_basis
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:TRACKING_LOCALTRACKING" {
        ext.when                                = params.run_local_tracking
        ext.local_tracking_mask_type            = params.fodf_local_fit_tracking_mask_type
        ext.local_fa_tracking_mask_threshold    = params.fodf_local_fit_tracking_mask_fa_threshold
        ext.local_seeding_mask_type             = params.fodf_local_fit_seeding_type
        ext.local_fa_seeding_mask_threshold     = params.fodf_local_fit_seeding_fa_threshold
        ext.local_seeding                       = params.fodf_local_fit_seeding_strategy
        ext.local_nbr_seeds                     = params.fodf_local_fit_seeding_n_seeds
        ext.local_algo                          = params.fodf_local_fit_algorithm
        ext.local_step                          = params.fodf_local_fit_step_size
        ext.local_theta                         = params.fodf_local_fit_theta_max_deviation
        ext.local_sfthres                       = params.fodf_local_fit_sf_threshold
        ext.local_min_len                       = params.fodf_local_fit_streamline_min_length
        ext.local_max_len                       = params.fodf_local_fit_streamline_max_length
        ext.local_random_seed                   = params.fodf_local_fit_random_seed
        ext.local_compress_streamlines          = params.fodf_local_fit_compress_tractogram
        ext.local_compress_value                = params.fodf_local_fit_compress_max_displacement
        ext.basis                               = params.dwi_fodf_fit_basis
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:BUNDLE_SEG:REGISTRATION_ANTS"{
        ext.quick                               = true
        ext.random_seed                         = 50
        ext.repro_mode                          = 1
        ext.transform                           = "r"
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:BUNDLE_SEG:BUNDLE_RECOGNIZE"{
        ext.minimal_vote_ratio                  = params.bundle_rbx_minimal_vote_ratio
        ext.seed                                = params.bundle_rbx_seed
        ext.rbx_processes                       = params.allocation_cpu_map_bundle_rbx
        ext.outlier_alpha                       = params.bundle_rbx_outlier_alpha
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:NII_TO_DICOM:IO_NII2DCM"{
        ext.study_description = "SurgeryFlow"
        ext.reference_dicom = true
    }

    withName: "NF_SURGERYFLOW:SURGERYFLOW:NII_TO_DICOM:REGISTRATION_TRACTOGRAM"{
        ext.reverse_operation = true
        ext.inverse = false
        ext.cut_invalid = true
        ext.remove_single_point = true
        ext.force = true
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: "*_versions.yml"
        ]
    }

    // withName: "MULTIQC" {
    //     ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : "" }
    //     publishDir = [
    //         path: { "${params.outdir}/multiqc" },
    //         mode: params.publish_dir_mode,
    //         saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
    //     ]
    // }

}
